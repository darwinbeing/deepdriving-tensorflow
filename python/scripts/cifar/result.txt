# Evaluation of Network:
Creating network Graph...
 * network Input-Shape: (64, 28, 28, 3)
 * Create Conv2D Layer Conv2D with Kernel 5, Stride 1, Padding "SAME" and 128 Feature Maps
 * Create Conv2D Layer Conv2D with Kernel 5, Stride 1, Padding "SAME" and 128 Feature Maps
   * With Batch-Normalization
 * Create Pooling Layer Pooling with Window 3, Stride 2, Padding "SAME" and Function MAX 
 * Create Conv2D Layer Conv2D with Kernel 5, Stride 1, Padding "SAME" and 128 Feature Maps
 * Create Conv2D Layer Conv2D with Kernel 5, Stride 1, Padding "SAME" and 128 Feature Maps
   * With Batch-Normalization
 * Create Pooling Layer Pooling with Window 3, Stride 2, Padding "SAME" and Function MAX 
 * Create Conv2D Layer Conv2D with Kernel 5, Stride 1, Padding "SAME" and 128 Feature Maps
 * Create Conv2D Layer Conv2D with Kernel 5, Stride 1, Padding "SAME" and 128 Feature Maps
   * With Batch-Normalization
 * Create Pooling Layer Pooling with Window 3, Stride 2, Padding "SAME" and Function MAX 
* Apply sequence of 5 layers with name "Network":
  * Apply sequence of 3 layers with name "Dense_BN_ReLU":
    * Apply layer "Dense"
      * Reshape layer input (64, 4, 4, 128) to vector with 2048 elements.
      * with 1024 Output-Nodes without Bias
    * Batch-Normalization
    * ReLU Activation function
  * Dropout with keep ratio 0.5
  * Apply sequence of 3 layers with name "Dense_BN_ReLU":
    * Apply layer "Dense"
      * with 256 Output-Nodes without Bias
    * Batch-Normalization
    * ReLU Activation function
  * Apply sequence of 3 layers with name "Dense_BN_ReLU":
    * Apply layer "Dense"
      * with 64 Output-Nodes without Bias
    * Batch-Normalization
    * ReLU Activation function
  * Apply layer "Dense"
    * with 10 Output-Nodes
 * network Output-Shape: (64, 10)
Finished to build network with 4442944 trainable variables in 43 tensors.

# Using Checkpoint:
* Checkpoint\State_0\model_120.ckpt

# Using Training-Settings:
{
  "Data": {
    "BatchSize": 64,
    "ImageHeight": 32,
    "ImageWidth": 32,
    "TrainingPath": "C:/Data/Cifar-10/training",
    "ValidatingPath": "C:/Data/Cifar-10/validation"
  },
  "Optimizer": {
    "EpochsPerDecay": 30,
    "LearnRateDecay": 0.5,
    "Momentum": 0.9,
    "StartingLearningRate": 0.003,
    "WeightDecay": 0.0
  },
  "PreProcessing": {
    "MeanFile": "image-mean.tfrecord"
  },
  "Trainer": {
    "CheckpointEpochs": 2,
    "CheckpointPath": "Checkpoint",
    "EpochSize": 50000,
    "NumberOfEpochs": 120,
    "SummaryPath": "Summary"
  },
  "Validation": {
    "Samples": 10000
  }
}

# Using Evaluation-Settings:
{
  "Data": {
    "BatchSize": 64,
    "ImageHeight": 32,
    "ImageWidth": 32,
    "ValidatingPath": "C:/Data/Cifar-10/validation"
  },
  "Evaluator": {
    "CheckpointPath": "Checkpoint",
    "EpochSize": 1000,
    "NumberOfEpochs": 10
  },
  "PreProcessing": {
    "MeanFile": "image-mean.tfrecord"
  }
}

# Evaluation Results:
Full Summary:
 *  Error: 11.50%